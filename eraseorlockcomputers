#!/bin/bash


###############################################
# Send an Erase / Device Lock Command to a Group of Computers
#
# For this to work, you just need a group ID. 
#
# Fill in the variables below, this will only prompt for a group ID if one is not present
#
# Script by Chris Zimmerman 
# Built on July 7th, 2022
#
#
# API ACCOUNT PRIVILEGE REQUIREMENTS (MINIMUM)
#
# JAMF PRO SERVER OBJECTS
# Computers > CREATE
# Smart Computer Groups > READ
# Static Computer Groups > READ
#
# JAMF PRO SERVER SETTINGS
# Check-in > READ (will also enable computer check-in setting)
#
# JAMF PRO SERVER ACTIONS
# Computer Remote Lock Command
# Computer Remote Wipe Command 
#
# If using this script, you are agreeing to using it as is
###############################################

#API USER
user=""
#API PASSWORD
pass=""
# URL (https://yourjamfserver.jamfcloud.com)
jurl=""
#GROUP ID
groupid=""
#PASSCODE (Six Digits Numbers Only) -- This is necessary for the command, but when erasing devices this may be ignored in Monterey
passcode=""
# Delete Modifier (In order to Erase Computers, you will need to change this value to 1)
eraseorlock="0"

#Prompt for URL for Jamf Pro Server (https://yourjamfproserver.jamfcloud.com)

if [[  -z $jurl ]]; then
	
	jurl=$(osascript << EOF
set jurl to display dialog "Jamf Pro Server URL (https://yourjamf.jamfcloud.com):" default answer "" buttons {"Continue"} default button "Continue"
text returned of jurl
EOF
)
	
fi

#Prompt for API Username
if [[  -z $user ]]; then
	
	user=$(osascript << EOF
set user to display dialog "Enter API Username:" default answer "" buttons {"Continue"} default button "Continue"
text returned of user
EOF
)
	
fi

#Prompt for API Password
if [[  -z $pass ]]; then
	
	pass=$(osascript << EOF
set pass to display dialog "Enter API password:" default answer "" buttons {"Continue"} default button "Continue" with hidden answer
text returned of pass
EOF
)
	
fi

#Prompt for Group ID
if [[  -z $groupid ]]; then
	
	groupid=$(osascript << EOF
set groupid to display dialog "Enter the Group ID:" default answer "" buttons {"Continue"} default button "Continue"
text returned of groupid
EOF
)
	
fi

#Setting the command
if [[ $eraseorlock == "1" ]]; then
	commandprompt="ERASE"
	command="EraseDevice"
else
	commandprompt="LOCK"
	command="DeviceLock"
fi

#Start of getting Bearer Token
classicCredentials=$(printf "${user}:${pass}" | /usr/bin/iconv -t ISO-8859-1 | /usr/bin/base64 -i - )

# generate an auth token
authToken=$( /usr/bin/curl "${jurl}/uapi/auth/tokens" \
--silent \
--request POST \
--header "Authorization: Basic ${classicCredentials}" )

#bearertoken
token=$( /usr/bin/awk -F \" '{ print $4 }' <<< "$authToken" | /usr/bin/xargs )

#Parse Through Group to get computer IDs
computerid+=($(curl -s -X GET $jurl/JSSResource/computergroups/id/$groupid -H "Authorization: Bearer $token" | xmllint --format - | awk -F '[<>]' '/<id>/{print $3}'| awk 'NR>2'))

echo ${computerid[@]}

if [[ -z ${computerid[@]} ]]; then
	osascript << EOF
set theDialogText to "There was an issue with your API Credentials or Group ID. Please try again."
	display dialog theDialogText buttons {"OK"} default button "OK"
EOF
	exit 0
fi

numberofcomputers=0
for id in ${computerid[@]}; do
	((numberofcomputers++))
done

echo $numberofcomputers

#passcode prompt
if [[  -z $passcode ]]; then
	
	passcode=$(osascript << EOF
set passcode to display dialog "To continue to $commandprompt $numberofcomputers computers. You need to set a passcode that is six digits and only numbers. (ex. 123456)" default answer "" buttons {"Continue"} default button "Continue" with hidden answer
text returned of passcode
EOF
)
fi

#passcode verification
passcodeverify=0
while [[ $passcodeverify == 0 ]]; do
if [[ $passcode =~ ^[0-9]{6} ]]; then
		echo "passcode is clean"
		((passcodeverify++))
	else
		passcode=$(osascript << EOF
set passcode to display dialog "Your passcode is invalid. Please enter a six-digit numeric code. You need to set a passcode that is six digits and only numbers. (ex. 123456)" default answer "" buttons {"Continue"} default button "Continue" with hidden answer
text returned of passcode
EOF
)
	fi
done
	


# Gives user time to know what passcode they just set
osascript << EOF
set theDialogText to "Please record the passcode for your records. Your passcode is $passcode"
display dialog theDialogText buttons {"OK"} default button "OK"
EOF

#Warning for Number of computers that are going to be Erase / Locked
finalwarning=$(osascript << EOF
set theDialogText to "You are about to $commandprompt $numberofcomputers computers. Do you wish to continue?"
display dialog theDialogText buttons {"Don't Continue", "Continue"} default button "Continue" cancel button "Don't Continue"
EOF
)

if [[ $finalwarning == "button returned:"Continue"" ]]; then
	
	#Erase or Lock Device Command	
	for id in ${computerid[@]}; do
		curl -s -X POST $jurl/JSSResource/computercommands/command/$command/passcode/$passcode/id/$id -H "Authorization: Bearer $token"
	done
	
else
	osascript << EOF
set theDialogText to "Action Cancelled"
display dialog theDialogText buttons {"OK"} default button "OK"
EOF
fi
